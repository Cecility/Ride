<!DOCTYPE html>
<html>
    <head>
        
        <!-- Linking CSS -->
        <link rel="stylesheet" type="text/css" href="/stylesheets/addGroup.css">
        
        <!-- Latest compiled and minified CSS -->
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
        
        <script src="https://code.jquery.com/jquery-3.1.1.js"
        integrity="sha256-16cdPddA6VdVInumRGo6IbivbERE8p7CQR3HzTBuELA="
        crossorigin="anonymous"></script>
        
    </head>

    <body>
        <!-- Search Bars -->
        <div id="pac-input-container">
            <input id="pac-input" class="controls" type="text" placeholder="Pick up location">
            <input id="pac-input2" class="controls" type="text" placeholder="Drop off location">  
        </div>
        
        <!-- Display Google Map -->
        <div id="map"></div>
        
        <!-- Submit Button -->
        <button id="submit-btn" class="btn btn-success">Create Group</button>
        
        
        <script>
          // This example adds a search box to a map, using the Google Place Autocomplete
          // feature. People can enter geographical searches. The search box will return a
          // pick list containing a mix of places and predicted search terms.

          // This example requires the Places library. Include the libraries=places
          // parameter when you first load the API. For example:
          // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

          function initAutocomplete() {
            var map = new google.maps.Map(document.getElementById('map'), {
              center: {lat: 32.880376, lng: -117.235065},
              zoom: 13,
              mapTypeId: 'roadmap',
              mapTypeControl: false,
            });

            // Create the search box and link it to the UI element.
            var input = document.getElementById('pac-input');
            var input2 = document.getElementById('pac-input2');
            var inputContainer = document.getElementById('pac-input-container')
            var submitBtn = document.getElementById('submit-btn');
              
            $('#submit-btn').on('click', function(event){
                if($('#pac-input').val() == ''){
                    $('#pac-input').css("border-color", "red");
                    console.log("Pick up location not selected");
                    }
                
                if($('#pac-input2').val() == ''){
                    $('#pac-input2').css("border-color", "red");
                    console.log("Drop off location not selected");
                    }
                
                else if($('#pac-input2').val() != '' && $('#pac-input').val() != ''){
                    $('#pac-input').css("border-color", "transparent");
                    $('#pac-input2').css("border-color", "transparent");
                    console.log("group created")
                }
            })  
            // Applying Google Search Box property to Input
            var searchBox = new google.maps.places.SearchBox(input);
            var searchBox2 = new google.maps.places.SearchBox(input2);
              
            // Putting control elements into map  
            map.controls[google.maps.ControlPosition.TOP_CENTER].push(inputContainer);
            map.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(submitBtn);

            // Bias the SearchBox results towards current map's viewport.
            map.addListener('bounds_changed', function() {
              searchBox.setBounds(map.getBounds());
              searchBox2.setBounds(map.getBounds());
            });
              

            var markers = [];
            var markers2 = [];
              
            // Listen for the event fired when the user selects a prediction and retrieve
            // more details for that place.
            searchBox.addListener('places_changed', function() {
              var places = searchBox.getPlaces();

              if (places.length == 0) {
                return;
              }

              // Clear out the old markers.
              markers.forEach(function(marker) {
                marker.setMap(null);
              });
              markers = [];

              // For each place, get the icon, name and location.
              var bounds = new google.maps.LatLngBounds();
              places.forEach(function(place) {
                if (!place.geometry) {
                  console.log("Returned place contains no geometry");
                  return;
                }
                var icon = {
                  url: "http://maps.google.com/mapfiles/ms/icons/green.png",
                  size: new google.maps.Size(71, 71),
                  origin: new google.maps.Point(0, 0),
                  anchor: new google.maps.Point(17, 34),
                  scaledSize: new google.maps.Size(25, 25)
                };

                // Create a marker for each place.
                markers.push(new google.maps.Marker({
                  map: map,
                  icon: icon,
                  title: place.name,
                  position: place.geometry.location
                }));

                if (place.geometry.viewport) {
                  // Only geocodes have viewport.
                  bounds.union(place.geometry.viewport);
                } else {
                  bounds.extend(place.geometry.location);
                }
              });
              map.fitBounds(bounds);
            });


            searchBox2.addListener('places_changed', function() {
              var places = searchBox2.getPlaces();

              if (places.length == 0) {
                return;
              }

              // Clear out the old markers.
              markers2.forEach(function(marker) {
                marker.setMap(null);
              });
              markers2 = [];

              // For each place, get the icon, name and location.
              var bounds = new google.maps.LatLngBounds();
              places.forEach(function(place) {
                if (!place.geometry) {
                  console.log("Returned place contains no geometry");
                  return;
                }
                var icon2 = {
                  url: "http://maps.google.com/mapfiles/ms/icons/red.png",
                  size: new google.maps.Size(71, 71),
                  origin: new google.maps.Point(0, 0),
                  anchor: new google.maps.Point(17, 34),
                  scaledSize: new google.maps.Size(25, 25)
                };

                // Create a marker for each place.
                markers2.push(new google.maps.Marker({
                  map: map,
                  icon: icon2,
                  title: place.name,
                  position: place.geometry.location
                }));

                if (place.geometry.viewport) {
                  // Only geocodes have viewport.
                  bounds.union(place.geometry.viewport);
                } else {
                  bounds.extend(place.geometry.location);
                }
              });
              map.fitBounds(bounds);
            });
          }
        </script>
        
        <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCm_HyYv53RLUIrqJICXV736xFbliLqSVA&libraries=places&callback=initAutocomplete"
             async defer></script>
    </body>
</html>